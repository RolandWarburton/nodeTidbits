user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
        # here we include some default nginx bits
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
        access_log  /var/log/nginx/access.log  main;
        sendfile        on;

        # proxy behaviour documentation from nginx
        # https://www.nginx.com/resources/wiki/start/topics/examples/forwarded/

        # read about why i use these settings in particular (i stole them from this article)
        # https://www.freecodecamp.org/news/docker-nginx-letsencrypt-easy-secure-reverse-proxy-40165ba3aee2/

        # this header is added so you can see which IP is actually requesting your service. (instead of the GW)
        proxy_set_header    X-Real-IP           $remote_addr;
        # store array of forwarded clients the client has been proxied through
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        # write what protocol is being used between client and server (http/https)
        proxy_set_header    X-Forwarded-Proto   $scheme;
        # set the host for reverse dns lookups (ip -> domain name) to work correctly
        proxy_set_header    Host                $host;
        # shows what the real host of the request is instead of the reverse proxy.
        proxy_set_header    X-Forwarded-Host    $host;
        # Helps identify what port the client requested the server on.
        proxy_set_header    X-Forwarded-Port    $server_port;
        

        # give nginx some upstream servers to use for load balancing
        # you can define multiple of these in each upstream group and round robin or ip_hash (sticky ip) them
        upstream app1 {
                # why this is template01:3000...
                # from the perspective of template01 its address is localhost:3000
                # from the perspective of the host OS its address is localhost:3001 (because 3001 is exposed to the host)
                # from the perspective of the gateway template01 is on 3000 because its INSIDE the "docker_network" network
                # therefore when we want to PROXY to this service from the gateway, we are INSIDE the shared docker network so we use port 3000
                # and the containers name (not localhost), each docker network has its own dns to route the request to the container
                server template01:3000;
        }

        upstream app2 {
                server template02:3000;
        }

        ################
        #   0x8.host   #
        ################
        server {
                listen 80 default_server;
                listen 443 ssl http2 default_server;
                listen [::]:80 default_server;

                # we mount these certificates into the container and run certbot on the host
                ssl_certificate /etc/letsencrypt/live/0x8.host/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/0x8.host/privkey.pem;

                ssl_protocols TLSv1.3;
		gzip on;

                # we are going to share files from here
                root /usr/share/nginx/html;
                autoindex on;

                # Add index.php to the list if you are using PHP
                index index.html index.htm index.nginx-debian.html;

                # define the server name so nginx knows to route requests for this domain here
                server_name 0x8.host;

                # serve some example content on root
                location / {
                        root   /usr/share/nginx/html;
                        index  index.html index.htm;
                }

                # proxy requests to their own webserver instances
                location /app1 {
                        proxy_pass http://app1/;
                }

                location /app2 {
                        proxy_pass http://app2;
                }
        }

        # ────  another example server using a subdomain ────────────────────────────────────────
        server {
                listen 80;
                listen [::]:80;

                ssl_protocols TLSv1.3;
                gzip on;

                # we are going to share files from here
                root /usr/share/nginx/html;
                autoindex on;

                # Add index.php to the list if you are using PHP
                index index.html index.htm index.nginx-debian.html;

                # define the server name so nginx knows to route requests for this domain here
                server_name api.0x4.host;

                # serve some example content on root
                location / {
                        root   /usr/share/nginx/html;
                        index  index.html index.htm;
                }

                # proxy requests to their own webserver instances
                # BUT avoid the path that was provided to the gateway, for example:
                # 0x8.host/app/request will be proxied to the upstream server as just /request
                location = /app {
                        return 302 /app2/;
                }
                location /app/ {
                        proxy_pass http://app2/;
                }
        }
}
