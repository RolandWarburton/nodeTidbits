user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
        # here we include some default nginx bits
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
        access_log  /var/log/nginx/access.log  main;
        sendfile        on;

        # proxy behaviour
        # https://www.nginx.com/resources/wiki/start/topics/examples/forwarded/
        proxy_redirect off;
        # this is VERY important to allow rev proxying to any port
        proxy_set_header   Host             $http_host;
        # make the "real ip"  the client address instead of the gateway
        proxy_set_header   X-Real-IP        $remote_addr;
        # append $remote_addr to any incoming X-Forwarded-For headers
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        # for large requests that dont fit into $proxy_buffers we need to govern the maximum size of the temp file that nginx will create
        proxy_max_temp_file_size 1024m;
        

        # give nginx some upstream servers to use for load balancing
        # you can define multiple of these in each upstream group and round robin or ip_hash (sticky ip) them
        upstream app1 {
                server 127.0.0.1:3001;
        }

        upstream app2 {
                server 127.0.0.1:3002;
        }

        ################
        #   0x8.host   #
        ################
        server {
                listen 80 default_server;
                listen 443 ssl http2 default_server;
                listen [::]:80 default_server;

                # we mount these certificates into the container and run certbot on the host
                ssl_certificate /etc/letsencrypt/live/0x8.host/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/0x8.host/privkey.pem;

                ssl_protocols TLSv1.3;

                # we are going to share files from here
                root /usr/share/nginx/html;
                autoindex on;

                # Add index.php to the list if you are using PHP
                index index.html index.htm index.nginx-debian.html;

                # define the server name so nginx knows to route requests for this domain here
                server_name 0x8.host;

                # serve some example content on root
                location / {
                        root   /usr/share/nginx/html;
                        index  index.html index.htm;
                }

                # proxy requests to their own webserver instances
                location /app1 {
                        proxy_pass http://app1/;
                }

                location /app2 {
                        proxy_pass http://app2/;
                }
        }
}
